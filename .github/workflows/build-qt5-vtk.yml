name: build-qt5-vtk

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - 'main'
      - 'develop'

  workflow_dispatch:

env:
  AQT_TARGET: desktop
  AQT_VER: 5.15.2
  VTK_VER: 9.1.0

# ${{ env.RUNNER_WORKSPACE }} doesn't seem to work on linux and macos
# but ${RUNNER_WORKSPACE} is set in the environment for all os
# therefore use ${{ runner.workspace }} instead of ${{ env.RUNNER_WORKSPACE }}

jobs:
  cache-qt5-vtk:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "macos-11-debug",
            os: macos-11,
            cmake_config: Debug,
            aqt_host: mac,
            aqt_arch: clang_64
          }
        - {
            name: "ubuntu-20.04-debug",
            os: ubuntu-20.04,
            cmake_config: Debug,
            aqt_host: linux,
            aqt_arch: gcc_64
          }
        - {
            name: "windows-2019-debug",
            os: windows-2019,
            cmake_config: Debug,
            aqt_host: windows,
            aqt_arch: win64_msvc2019_64
          }
        - {
            name: "macos-11-release",
            os: macos-11,
            cmake_config: Release,
            aqt_host: mac,
            aqt_arch: clang_64
          }
        - {
            name: "ubuntu-20.04-release",
            os: ubuntu-20.04,
            cmake_config: Release,
            aqt_host: linux,
            aqt_arch: gcc_64
          }
        - {
            name: "windows-2019-release",
            os: windows-2019,
            cmake_config: Release,
            aqt_host: windows,
            aqt_arch: win64_msvc2019_64
          }
        - {
            name: "macos-12-debug",
            os: macos-12,
            cmake_config: Debug,
            aqt_host: mac,
            aqt_arch: clang_64
          }
        - {
            name: "ubuntu-22.04-debug",
            os: ubuntu-22.04,
            cmake_config: Debug,
            aqt_host: linux,
            aqt_arch: gcc_64
          }
        - {
            name: "windows-2022-debug",
            os: windows-2022,
            cmake_config: Debug,
            aqt_host: windows,
            aqt_arch: win64_msvc2019_64
          }
        - {
            name: "macos-12-release",
            os: macos-12,
            cmake_config: Release,
            aqt_host: mac,
            aqt_arch: clang_64
          }
        - {
            name: "ubuntu-22.04-release",
            os: ubuntu-22.04,
            cmake_config: Release,
            aqt_host: linux,
            aqt_arch: gcc_64
          }
        - {
            name: "windows-2022-release",
            os: windows-2022,
            cmake_config: Release,
            aqt_host: windows,
            aqt_arch: win64_msvc2019_64
          }

    steps:
      - uses: actions/checkout@v3

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.AQT_VER }}
          host: ${{ matrix.config.aqt_host }}
          target: ${{ env.AQT_TARGET }}
          arch: ${{ matrix.config.aqt_arch }}
          dir: ${{ runner.workspace }}
          cache: true
          cache-key-prefix: install-qt-action
          tools: tools_ninja

      - name: Add ninja path
        shell: bash
        run: |
          echo "${IQTA_TOOLS}/Ninja" >> $GITHUB_PATH

      - name: Set up Visual Studio shell
        if: runner.os == 'Windows'
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Cache VTK ${{ env.VTK_VER }} for Qt ${{ env.AQT_VER }}
        id: cache-qt5-vtk
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}
          key: ${{ matrix.config.os }}-qt5-vtk-${{ matrix.config.cmake_config }}-${{ hashFiles('CMakePresets-vtk-${{ env.VTK_VER }}-qt-${{ env.AQT_VER }}.json') }}

      - name: Build VTK ${{ env.VTK_VER }} for Qt ${{ env.AQT_VER }}
        if: steps.cache-qt5-vtk.outputs.cache-hit != 'true'
        working-directory: ${{ runner.workspace }}
        run: |
          curl -L -O https://github.com/Kitware/VTK/archive/refs/tags/v${{ env.VTK_VER }}.tar.gz
          tar xzf ./v${{ env.VTK_VER }}.tar.gz
          cp ${{ github.workspace }}/CMakePresets-vtk-${{ env.VTK_VER }}-qt-${{ env.AQT_VER }}.json ./VTK-${{ env.VTK_VER }}/CMakePresets.json
          cd ./VTK-${{ env.VTK_VER }}/.
          cmake --preset ${{ matrix.config.aqt_arch }}
          cmake --build --preset ${{ matrix.config.aqt_arch }} --config ${{ matrix.config.cmake_config }}
          cmake --install ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}-build --config ${{ matrix.config.cmake_config }}

      - name: Dump contexts
        if: true
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          ENV_CONTEXT: ${{ toJSON(env) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          #JOBS_CONTEXT: ${{ toJSON(jobs) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
          SECRETS_CONTEXT: ${{ toJSON(secrets) }}
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          INPUTS_CONTEXT: ${{ toJSON(inputs) }}
        run: |
          echo '########################  github  ###################################'
          echo '${{ env.GITHUB_CONTEXT }}'
          echo '########################   env    ###################################'
          echo '${{ env.ENV_CONTEXT }}'
          echo '########################   job    ###################################'
          echo '${{ env.JOB_CONTEXT }}'
          echo '########################   jobs   ###################################'
          echo '${{ env.JOBS_CONTEXT }}'
          echo '########################   steps  ###################################'
          echo '${{ env.STEPS_CONTEXT }}'
          echo '########################  runner  ###################################'
          echo '${{ env.RUNNER_CONTEXT }}'
          echo '########################  secrets  ###################################'
          echo '${{ env.SECRETS_CONTEXT }}'
          echo '######################## strategy ###################################'
          echo '${{ env.STRATEGY_CONTEXT }}'
          echo '########################  matrix  ###################################'
          echo '${{ env.MATRIX_CONTEXT }}'
          echo '########################   needs  ###################################'
          echo '${{ env.NEEDS_CONTEXT }}'
          echo '########################  inputs  ###################################'
          echo '${{ env.INPUTS_CONTEXT }}'
          echo '#####################################################################'
          echo "runner.workspace = ${{ runner.workspace }}"
          echo "github.workspace = ${{ github.workspace }}"
          echo "env.RUNNER_WORKSPACE = ${{ env.RUNNER_WORKSPACE }}"
          echo "RUNNER_WORKSPACE = ${RUNNER_WORKSPACE}"


  merge:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [cache-qt5-vtk]
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-12, ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022 ]

    steps:
      - uses: actions/checkout@v3

      - name: Cache qt5-vtk debug
        id: cache-qt5-vtk-debug
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}
          key: ${{ matrix.os }}-qt5-vtk-Debug-${{ hashFiles('CMakePresets-vtk-${{ env.VTK_VER }}-qt-${{ env.AQT_VER }}.json') }}

      - name: Cache qt5-vtk release
        id: cache-qt5-vtk-release
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}
          key: ${{ matrix.os }}-qt5-vtk-Release-${{ hashFiles('CMakePresets-vtk-${{ env.VTK_VER }}-qt-${{ env.AQT_VER }}.json') }}

      - name: 7-Zip it up
        run: 7z a ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}-${{ matrix.os }}.7z ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifact
          path: ${{ runner.workspace }}/qt5-vtk-${{ env.VTK_VER }}-${{ matrix.os }}.7z

  release:
    name: Create release
    runs-on: windows-2022
    needs: [merge]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: macos-11-artifact
          path: ${{ runner.workspace }}

      - uses: actions/download-artifact@v3
        with:
          name: macos-12-artifact
          path: ${{ runner.workspace }}

      - uses: actions/download-artifact@v3
        with:
          name: ubuntu-20.04-artifact
          path: ${{ runner.workspace }}

      - uses: actions/download-artifact@v3
        with:
          name: ubuntu-22.04-artifact
          path: ${{ runner.workspace }}

      - uses: actions/download-artifact@v3
        with:
          name: windows-2019-artifact
          path: ${{ runner.workspace }}

      - uses: actions/download-artifact@v3
        with:
          name: windows-2022-artifact
          path: ${{ runner.workspace }}

      - name: Display structure of downloaded files
        shell: pwsh
        working-directory: ${{ runner.workspace }}
        run: Get-ChildItem

      - name: Create release
        env:
          releases_url: ${{ github.api_url }}/repos/${{ github.repository }}/releases
        shell: pwsh
        working-directory: ${{ runner.workspace }}
        run: |
          # create tag
          $tag_name = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH.mm.ssK')
          # store commit
          $target_commitish = "${{ github.sha }}"
          # create headers dictionary
          $h = @{"Authorization" = "token ${{ secrets.GITHUB_TOKEN}} "}
          $releases_url = "${{ env.releases_url }}"
          # create release
          # POST /repos/{owner}/{repo}/releases
          # see https://docs.github.com/en/rest/reference/repos#create-a-release
          #
          $create = @{
            "tag_name"         = "$tag_name"
            "target_commitish" = "$target_commitish"
            "name"             = "modelviewer-mf6-build-deps " + $tag_name
            "draft"            = $true
          }
          $create_json = $create | ConvertTo-Json
          $release = Invoke-WebRequest -Uri $releases_url -Headers $h -Method POST -Body $create_json
          # upload artifact (asset)
          # POST /repos/{owner}/{repo}/releases/{release_id}/assets
          # see https://docs.github.com/en/rest/reference/repos#upload-a-release-asset
          #
          $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
          if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
            # expecting URI{?name,label}
            # ie https://uploads.github.com/repos/scharlton2/modelviewer-mf6-build-deps/releases/24058628/assets{?name,label}
            throw "Bad upload_url"
          }
          $oss = @('macos-11', 'macos-12', 'ubuntu-20.04', 'ubuntu-22.04', 'windows-2019', 'windows-2022')
          foreach ( $os in $oss ) {
            $upload_uri = $Matches[1] + "?name=qt5-vtk-${{ env.VTK_VER }}-$os.7z"
            $h["Content-type"] = "application/x-7z-compressed"
            $bytes = [System.IO.File]::ReadAllBytes("qt5-vtk-${{ env.VTK_VER }}-$os.7z")
            $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes
          }

          # update release
          # PATCH /repos/{owner}/{repo}/releases/{release_id}
          # see https://docs.github.com/en/rest/reference/repos#update-a-release
          #
          $release_id = ($release.Content | ConvertFrom-Json).id
          $h.Remove("Content-type")
          $update = @{ "draft" = $false }
          $update_json = $update | ConvertTo-Json
          $release = Invoke-WebRequest -Uri "$releases_url/$release_id" -Headers $h -Method PATCH -Body $update_json
          # display download url
          Write-Output "$((($release.Content | ConvertFrom-Json).assets).browser_download_url)"
          foreach ( $os in $oss ) {
            Get-FileHash "qt5-vtk-${{ env.VTK_VER }}-$os.7z"
          }